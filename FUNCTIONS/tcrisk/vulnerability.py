import numpy as np
import xarray as xr

def vulnerability(V,Vthresh,Vhalf):
    """
    Written by Jane W. Baldwin (UC Irvine) based on Emanuel 2011 "Global warming effects on US hurricane damage", Weather Climate and Society.
    Calculate fractional property value lost for a given wind speed.
    
    Velocity units of three inputs V, Vthresh, and Vhalf all need to be consistent.
    :param V: Input wind speed; can be a numpy array (eg of a TC swath)
    :param Vthresh: windspeed at and below which no damage occurs
    :param Vhalf: windspeed at which half the property value is lost
    :return: fractional property value lost for each input wind speed in array matching dimensions of V
    """ 
    vn0 = V-Vthresh
    vn = np.maximum(vn0, np.zeros(np.shape(vn0)))/(Vhalf-Vthresh)
    f = vn**3/(1+vn**3)
     
    return f

def vulnerability_xr(V,Vthresh,Vhalf):
    """
    Written by Jane W. Baldwin (UC Irvine) based on Emanuel 2011 "Global warming effects on US hurricane damage", Weather Climate and Society.
    Calculate fractional property value lost for a given wind speed.
    Different from vulnerability function because optimized to be used with xarray dataarrays.
    
    Velocity units of three inputs V, Vthresh, and Vhalf all need to be consistent.
    :param V: Input wind speed; can be a numpy array (eg of a TC swath)
    :param Vthresh: windspeed at and below which no damage occurs
    :param Vhalf: windspeed at which half the property value is lost
    :return: fractional property value lost for each input wind speed in array matching dimensions of V
    """
    vn0 = V-Vthresh
    vn = vn0.where(vn0>0,0)/(Vhalf-Vthresh)
    f = vn**3/(1+vn**3)

    return f
